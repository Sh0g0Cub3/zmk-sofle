#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    macros {
        code_block: code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "CODE_BLOCK";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "PARENTHESES";
        };

        square_brackets: square_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "SQUARE_BRACKETS";
        };

        curly_braces: curly_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LS(LEFT_BRACE) &kp LS(RIGHT_BRACKET) &kp LEFT_ARROW>;
            label = "CURLY_BRACES";
        };

        at_mark: at_mark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp AT_SIGN>;
            label = "AT_MARK";
        };

        corner_brackets: corner_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp ENTER &kp LEFT_ARROW>;
            label = "CORNER_BRACKETS";
        };
    };

    combos {
        compatible = "zmk,combos";

        ime {
            bindings = <&kp LC(SPACE)>;
            key-positions = <34 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC           &kp N1        &kp N2        &kp N3           &kp N4           &kp N5         &kp UP_ARROW     &kp N6                &kp N7          &kp N8          &kp N9        &kp N0           &kp GRAVE
&kp TAB           &kp Q         &kp W         &kp E            &kp R            &kp T          &kp DOWN_ARROW   &kp Y                 &kp U           &kp I           &kp O         &kp P            &kp BSLH
&kp LEFT_CONTROL  &kp A         &kp S         &kp D            &kp F            &kp G          &kp LEFT_ARROW   &kp H                 &kp J           &kp K           &kp L         &kp SEMI         &kp APOS
&kp LSHFT         &kp Z         &kp X         &kp C            &kp V            &kp B          &kp RIGHT_ARROW  &kp N                 &kp M           &kp COMMA       &kp DOT       &kp FSLH         &kp BACKSPACE
&kp LG(NUMBER_1)  &kp LEFT_ALT  &kp LEFT_GUI  &lt 2 LA(SPACE)  &lt 4 LG(SPACE)  &lt 3 SPACE    &mkp LCLK        &mt LEFT_SHIFT ENTER  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW
            >;

            sensor-bindings = <&inc_dec_kp LA(LG(LEFT_ARROW)) LA(LG(RIGHT_ARROW))>;
            display-name = "Default";
        };

        Arrow {
            bindings = <
&trans            &kp F1  &kp F2                    &kp F3             &kp F4                     &kp F5    &none  &kp F6          &kp F7          &kp F8        &kp F9           &kp F10  &trans
&trans            &none   &none                     &none              &none                      &none     &none  &kp F11         &kp F12         &none         &none            &none    &trans
&trans            &none   &kp LC(LG(LEFT_BRACKET))  &kp LC(LG(SPACE))  &kp LC(LG(RIGHT_BRACKET))  &none     &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none    &trans
&trans            &none   &none                     &none              &none                      &none     &none  &none           &none           &none         &none            &none    &trans
&kp LG(NUMBER_0)  &trans  &trans                    &trans             &trans                     &trans    &none  &trans          &trans          &trans        &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(EQUAL) LG(MINUS)>;
        };

        Symbol {
            bindings = <
&trans       &trans  &trans  &trans     &trans       &trans             &mmv MOVE_UP     &trans            &trans            &trans  &trans  &trans  &trans
&trans       &none   &none   &kp HASH   &at_mark     &kp EXCLAMATION    &mmv MOVE_DOWN   &parentheses      &none             &none   &none   &none   &trans
&trans       &none   &none   &none      &code_block  &kp LS(MINUS)      &mmv MOVE_LEFT   &square_brackets  &none             &none   &none   &none   &trans
&trans       &none   &none   &kp EQUAL  &kp PLUS     &kp MINUS          &mmv MOVE_RIGHT  &curly_braces     &corner_brackets  &none   &none   &none   &trans
&bootloader  &trans  &trans  &trans     &trans       &trans             &mkp LCLK        &trans            &trans            &trans  &trans  &trans
            >;
        };

        Display {
            bindings = <
&trans  &trans         &trans             &trans             &trans             &trans               &kp LA(K)  &trans                  &trans              &trans         &trans                   &trans  &trans
&trans  &kp LA(LC(G))  &kp LA(LC(N))      &kp LA(LC(C))      &kp LA(LC(E))      &kp LA(LC(M))        &kp LA(J)  &kp LC(UP_ARROW)        &kp LC(LG(U))       &kp LC(LG(I))  &none                    &none   &trans
&trans  &kp LA(LC(A))  &kp LA(LC(T))      &kp LA(LC(S))      &kp LA(LC(B))      &kp LA(LC(F))        &kp LA(H)  &kp LC(LG(LEFT_ARROW))  &kp LC(LG(J))       &kp LC(LG(K))  &kp LC(LG(RIGHT_ARROW))  &none   &trans
&trans  &none          &kp LS(LA(LC(F)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(P)))  &kp LS(LA(LC(D)))    &kp LA(L)  &kp LC(LG(COMMA))       &kp LC(LG(PERIOD))  &none          &none                    &none   &trans
&trans  &trans         &trans             &trans             &kp LC(M)          &trans               &trans     &trans                  &kp LC(LG(ENTER))   &trans         &trans                   &trans
            >;
        };

        Function {
            bindings = <
&kp F1  &kp F2         &kp F3         &kp F4         &kp F5         &kp F6               &kp LG(EQUAL)     &kp F7             &kp F8                    &kp F9                     &kp F10            &kp F11          &kp F12
&none   &kp LC(LG(P))  &none          &none          &none          &kp LC(M)            &kp LG(MINUS)     &none              &none                     &none                      &none              &kp LC(LG(P))    &none
&none   &none          &kp LC(LG(S))  &none          &kp LC(LG(F))  &kp LA(M)            &none             &none              &none                     &none                      &none              &none            &none
&none   &none          &none          &kp LC(LG(C))  &kp LC(LG(V))  &kp LC(LG(B))        &none             &none              &none                     &none                      &none              &none            &none
&none   &none          &none          &none          &none          &kp LS(LC(LG(B)))    &kp LG(NUMBER_0)  &kp LC(LG(SPACE))  &kp LC(LG(LEFT_BRACKET))  &kp LC(LG(RIGHT_BRACKET))  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
            >;
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
